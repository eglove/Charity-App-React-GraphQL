# import * from './generated/prisma.graphql'
type Mutation {
	createNonProfit(
		ein: Int!
		name: String!
		ico: String
		street: String!
		city: String!
		state: String!
		zip: String!
		group: Int
		subsection: Int
		affiliation: Int
		classification: Int
		ruling: Int
		deductibility: Int
		foundation: Int
		activity: Int
		organization: Int
		status: Int
		taxperiod: Int
		assetCd: Int
		incomeCd: Int
		filingReqCd: Int
		pfFilingReqCd: Int
		acctPd: Int
		assetAmt: Int
		revenueAmt: Int
		nteeCd: String
		sortName: String
	):NonProfit!

	updateNonProfit(
		id: ID!
		ein: Int
		name: String
		ico: String
		street: String
		city: String
		state: String
		zip: String
		group: Int
		subsection: Int
		affiliation: Int
		classification: Int
		ruling: Int
		deductibility: Int
		foundation: Int
		activity: Int
		organization: Int
		status: Int
		taxperiod: Int
		assetCd: Int
		incomeCd: Int
		filingReqCd: Int
		pfFilingReqCd: Int
		acctPd: Int
		assetAmt: Int
		revenueAmt: Int
		nteeCd: String
		sortName: String
	):NonProfit!

	deleteNonProfit(id: ID!):NonProfit

	createUser(name: String!, email: String!, password: String!):User!

	updateUser (name: String, email: String, password: String):User!
}

type Query {
	nonProfits(where:NonProfitWhereInput, orderBy:NonProfitOrderByInput, skip:Int, first:Int): [NonProfit!]!
	nonProfit(where:NonProfitWhereUniqueInput!):NonProfit
	nonProfitsConnection(where:NonProfitWhereInput):NonProfitConnection!

	users: [User!]!
	user(where:UserWhereUniqueInput!):User
	usersConnection(where:UserWhereInput):UserConnection!
	me:User
}